import { BlendFunction, VignetteEffect, VignetteTechnique } from 'postprocessing';
export interface VignetteProps {
    /**
     * Whether the noise should be multiplied with the input color.
     */
    technique?: VignetteTechnique;
    blendFunction?: BlendFunction;
    offset: number;
    darkness: number;
}
declare const _default: import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<VignetteProps>, {
    technique: VignetteTechnique;
    blendFunction: BlendFunction;
    offset: number;
    darkness: number;
}>, {
    pass: import("vue").ShallowRef<import("postprocessing").EffectPass | null>;
    effect: import("vue").ShallowRef<VignetteEffect | null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<VignetteProps>, {
    technique: VignetteTechnique;
    blendFunction: BlendFunction;
    offset: number;
    darkness: number;
}>>>, {
    blendFunction: BlendFunction;
    technique: VignetteTechnique;
    offset: number;
    darkness: number;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
