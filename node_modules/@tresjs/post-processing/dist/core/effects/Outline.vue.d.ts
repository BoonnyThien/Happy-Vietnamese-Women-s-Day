import { OutlineEffect } from 'postprocessing';
import type { TresColor } from '@tresjs/core';
import type { Object3D, Texture } from 'three';
import type { BlendFunction, KernelSize } from 'postprocessing';
export interface OutlineProps {
    /**
     * The objects in the scene which should have an outline.
     */
    outlinedObjects: Object3D[];
    blur?: boolean;
    /**
     * Whether occluded parts of selected objects should be visible
     */
    xRay?: boolean;
    /**
     * The blur kernel size. Must be used with blur being true.
     */
    kernelSize?: KernelSize;
    /**
     * The pulse speed. A value of zero disables the pulse effect.
     */
    pulseSpeed?: number;
    resolutionX?: number;
    resolutionY?: number;
    edgeStrength?: number;
    patternScale?: number;
    /**
     * The number of samples used for multisample antialiasing. Requires WebGL 2.
     */
    multisampling?: number;
    /**
     * The blend function. Use `BlendFunction.ALPHA` for dark outlines.
     */
    blendFunction?: BlendFunction;
    patternTexture?: Texture;
    resolutionScale?: number;
    hiddenEdgeColor?: TresColor;
    visibleEdgeColor?: TresColor;
}
declare const _default: import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<OutlineProps>, {
    blur: undefined;
    xRay: undefined;
}>, {
    pass: import("vue").ShallowRef<import("postprocessing").EffectPass | null>;
    effect: import("vue").ShallowRef<OutlineEffect | null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<OutlineProps>, {
    blur: undefined;
    xRay: undefined;
}>>>, {
    blur: boolean;
    xRay: boolean;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
