import { BloomEffect } from 'postprocessing';
import type { KernelSize, BlendFunction } from 'postprocessing';
export interface BloomProps {
    /**
     * The blend function of this effect. This prop is not reactive.
     * @default BlendFunction.SCREEN
     * @type {BlendFunction}
     * @memberof BloomProps
    */
    blendFunction?: BlendFunction;
    /**
     * The intensity of the bloom effect.
     *
     * @default 1
     * @type {number}
     * @memberof BloomProps
     */
    intensity?: number;
    /**
     * The kernel size.
     *
     * @default KernelSize.LARGE
     *
     * @type {KernelSize}
     * @memberof BloomProps
     */
    kernelSize?: KernelSize;
    /**
     * The luminance threshold. Raise this value to mask out darker elements in the scene. Range is [0, 1].
     *
     * @default 0.9
     *
     * @type {number}
     * @memberof BloomProps
     */
    luminanceThreshold?: number;
    /**
     * Controls the smoothness of the luminance threshold. Range is [0, 1].
     *
     * @default 0.025
     *
     * @type {number}
     * @memberof BloomProps
     */
    luminanceSmoothing?: number;
    /**
     * Enables mip map blur.
     *
     * @default false
     *
     * @type {boolean}
     * @memberof BloomProps
     */
    mipmapBlur?: boolean;
}
declare const _default: import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<BloomProps>, {
    mipmapBlur: undefined;
}>, {
    pass: import("vue").ShallowRef<import("postprocessing").EffectPass | null>;
    effect: import("vue").ShallowRef<BloomEffect | null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<BloomProps>, {
    mipmapBlur: undefined;
}>>>, {
    mipmapBlur: boolean;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
